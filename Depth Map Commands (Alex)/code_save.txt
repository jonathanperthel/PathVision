import numpy as np
import matplotlib.pyplot as plt
import cv2





# reads image 'opencv-logo.png' as grayscale
img = cv2.imread('sample_picture.jpg')
img = img[0:, 200:780]
plt.imshow(img)
plt.show()

#dilate image (remove areas of black)
kernel = np.ones((5,5), np.uint8)
img = cv2.dilate(img, kernel, iterations=20)

plt.imshow(img)
vert, horiz, channels = np.shape(img)
print(np.shape(img))




#filter for red
hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
plt.imshow(hsv)
plt.show()

#parameter checker, choose 1 variable at a time
#range 0-255 for every variable
for i in range(0,255,10):
    lower = np.array([107, 190, 240])
    upper = np.array([120, 255, 255])
    mask = cv2.inRange(hsv, lower, upper) # Masking the image to find our color
    plt.imshow(mask)
    plt.show()

    print(i)






#value of mask at (350,350)
print(mask[350][350])






#applys the mask
frame = cv2.bitwise_and(img, img, mask=mask)
plt.imshow(frame)
plt.show()

#find contours of object
cont, hierarch = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
if len(cont) != 0:
    for mask_contour in cont:
        if cv2.contourArea(mask_contour) > 100:
            x, y, w, h = cv2.boundingRect(mask_contour)
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 3) #drawing rectangle
            #cv2.circle(frame, (x,y), radius=10, color=(100, 100, 255), thickness=5)
plt.imshow(frame)






#reset img with lines
imgL = frame











#draw lines

#divide image into zones:
print(horiz)
div = round(horiz / 3)
print(round(div))

topLeft = (div, 0)
botLeft = (div*2, 0)
topRight = (div, vert)
botRight = (div*2, vert)
color = (0, 255, 0)
thickness = 9
  
#imgL = cv2.line(imgL, topLeft, botLeft, color, thickness)
#imgL = cv2.line(imgL, topRight, botRight, color, thickness)
imgL = cv2.rectangle(imgL, (div, 0), (div + div, y + vert), (255, 0, 255), 2)


plt.imshow(imgL)







#now we need to calculate how much of the object is in the detection zone










